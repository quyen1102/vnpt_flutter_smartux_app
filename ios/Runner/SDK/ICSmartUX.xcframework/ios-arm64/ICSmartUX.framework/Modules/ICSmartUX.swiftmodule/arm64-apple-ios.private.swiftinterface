// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ICSmartUX
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreText
import DeveloperToolsSupport
import Foundation
@_exported import ICSmartUX
import ObjectiveC
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class SwizzlingHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var next: UIKit.UIResponder? {
    @objc get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static func inject()
}
@objc public protocol ICSmartUXDelegate {
  @objc optional func icSmartUX(touch: CoreFoundation.CGPoint, type: Swift.String)
  @objc func icSmartUXSendRequest(image: UIKit.UIImage)
  @objc func icSmartUXDidResponse()
}
@objc public enum Platform : Swift.Int {
  case IOS
  case Flutter
  case ReactNative
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ICSmartUXOrientation : Swift.Int {
  case Portrait = 1
  case Landscape = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class ICSmartUX : ObjectiveC.NSObject {
  @objc public var urlUploadImage: Swift.String
  @objc public var urlUploadEvents: Swift.String
  @objc public var urlGetSurvey: Swift.String
  @objc public var urlSubmitSurvey: Swift.String
  @objc public var urlUpdateUserData: Swift.String
  @objc public var urlUploadUserFlow: Swift.String
  @objc public var isPrintLog: Swift.Bool
  @objc public var isShowToastTracking: Swift.Bool
  @objc public var isAutoViewTracking: Swift.Bool
  @objc public var platform: Platform
  @objc public var timeUploadEvent: Swift.Int
  @objc public var timeDelayMakeScreenshot: Swift.Double
  @objc public var sensitiveScreen: [Swift.String]
  @objc public var isDisableUploadImage: Swift.Bool
  @objc public var isDisableSurvey: Swift.Bool
  @objc public var isUseCombineCocoa: Swift.Bool
  @objc public init(host: Swift.String, appKey: Swift.String)
  @objc open func start()
  @objc open func stop()
  @objc deinit
}
extension ICSmartUX {
  @objc dynamic public class func makeScreenshotOutSide(name: Swift.String, forceUpload: Swift.Bool = false)
  @objc dynamic public class func recordViewOutSide(name: Swift.String, segmentation: [Swift.String : Swift.String])
  @objc dynamic public class func trackingNavigationScreen(name: Swift.String)
  @objc dynamic public class func trackingNavigationEnter(name: Swift.String, timeDelay: Swift.Double = 0.2, forceUpload: Swift.Bool = false)
  @objc dynamic public class func onChangeOrientation(newOrientation: ICSmartUXOrientation)
  @objc dynamic public class func recordHandledException(exception: Foundation.NSException)
  @objc dynamic public class func recordHandledException(exception: Foundation.NSException, withStackTrace: [Any]?)
  @objc dynamic public class func recordEvent(eventName: Swift.String, count: Swift.UInt)
  @objc dynamic public class func recordEvent(eventName: Swift.String, count: Swift.UInt, sum: Swift.Double)
  @objc dynamic public class func recordEvent(eventName: Swift.String, segmentation: [Swift.String : Swift.String]?, count: Swift.UInt)
  @objc dynamic public class func recordEvent(eventName: Swift.String, segmentation: [Swift.String : Swift.String]?, count: Swift.UInt, sum: Swift.Double)
  @objc dynamic public class func recordAction(actionId: Swift.String? = nil, actionName: Swift.String? = nil, screenName: Swift.String? = nil)
  @objc dynamic public class func startEvent(eventName: Swift.String)
  @objc dynamic public class func endEvent(eventName: Swift.String)
  @objc dynamic public class func endEvent(eventName: Swift.String, segmentation: [Swift.String : Swift.String]?, count: Swift.UInt, sum: Swift.Double)
  @objc dynamic public class func cancelEvent(eventName: Swift.String)
  @objc dynamic public class func recordCrashLog(log: Swift.String)
  @objc dynamic public class func setUserData(userData: [Swift.String : Any])
  @objc dynamic public class func setUserData(userId: Swift.String, userData: [Swift.String : Any])
  @objc dynamic public class func recordFlow(screenName: Swift.String)
}
extension Platform : Swift.Equatable {}
extension Platform : Swift.Hashable {}
extension Platform : Swift.RawRepresentable {}
extension ICSmartUXOrientation : Swift.Equatable {}
extension ICSmartUXOrientation : Swift.Hashable {}
extension ICSmartUXOrientation : Swift.RawRepresentable {}
